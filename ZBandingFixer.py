#Z Periodicity Removal Script by Justine Haupt
#v1.0: 10/3/17

##This script will imprint a periodic structure onto the motion of the Z axis of a 3D printer to compensate
##for incosistent (periodic) Z motion.

##It will ingest the newest .gcode file in the same directory as itself, modify all the Z movements according
##to variables defined in the script, and write it back to the same file.

##The shape of the periodic structure is defined by an easy-to-read Fourier Series. Delete all but the first
##term to get a sine wave.

##It will NOT do anything for Z wobble, only Z banding caused by z-axis movement error.For clarity, wobble is
##a periodic shift in layers due to lateral movement of the stage, wheras the banding referred to here is a
##periodic dilation in layers.

##Use with extreme care. This code has only been tested with gcode generated by Simplify3D.

import numpy as np
from numpy import arange
import matplotlib.pyplot as plt
import time, fileinput, glob, os




##Modify these values as needed:
A = .055			# Amplitude of deviation. Find by trial and error.
center = .015		# Center of amplitude. E.g. with an amplitude of .025 and a center of .010, the extremes will be -.015 and +.035. Leave as 0.0 if unsure.
phase = 0.0			# Height above bed where deviation is 0 with positive derivative. May be difficult to measure. Trial and error likely needed to find it.

##Constants intrinsic to the printer design. Modify to suit your machine:
pitch = 3.0			# Leadscrew pitch in mm. This defines the period of the deviation.
stepsz = .005		# 1 step of the Z motors moves the bed this distance in mm. Needed to avoid lost steps due to microstep rounding errors.





## MEAT: This function defines the shape of the deviation.
##This is a Fourier Series with each term on a separate line for readability. The first term by itself is a sine function. Add more terms by copying/ pasting and ncreasing the coefficient for zval with each new term), and adjusting the coefficient for A to play with the shape. Uncomment plt.show() below to see the shape.
def modz(zval):
	mz = -1 * (	\
	(1.00 *A * np.sin( (2*(1/pitch))* np.pi * (1 * zval - phase) ) + center) +	\
	(0.25 * A * np.sin( (2*(1/pitch))* np.pi * (2 * zval - phase) ) + center)	\
	)
	return mz


##Display shape of deviation of UNCORRECTED part surface over two periods at the step resolution for reference. Useful when defining something other than a sine wave in modz. Uncomment plt.show() to see.
x = arange(0,2*pitch,stepsz)			#This is only used to display function.
y = modz(x)							#Send the array into modz
y = -y								#Reverses the correction to show what the part surface looks like BEFORE correction.
plt.plot(y,x)						#Set up the plot.
plt.axis([-.5, .5, 0, 2*pitch])		#Define axis ranges.
plt.show()							#Uncomment to display plot.



list_of_files = glob.glob('./*.gcode') 						# Get list of all gcode files in current directory.
latest_file = max(list_of_files, key=os.path.getctime)		#From that list, find the most recent one and call it 'latest_file'.

print '\nLoading ' + latest_file + '\n'

with open(latest_file, 'a') as temp:				#Append comment to gcode file indicating that it's been modified by this script.
	temp.write('; ####This gcode has been post-processed by ZBandingFixer.py####\n')

for line in fileinput.input(latest_file, inplace=True): #%(filename))			#Opens the gcode file using a module where any time we print something, it overrites whatever was in that line of the file.
	if ';' in line:			#If there's a ';' just rewrite the old line
		print line,
	elif 'X' in line:		#If there's an 'X' just rewrite the old line
		print line,
	elif 'Y' in line:		#If there's a 'Y' just rewrite the old line
		print line,
	elif 'E' in line:		#If there's an 'E' just rewrite the old line
		print line,
	elif 'Z' in line:							#If a line has a Z (but none of the above characters), then it's a line we want to change. We...
		s = line							#...call it 's' (for string)...
		num_char = (".", "+", "-")			#...define a list of characters to also look for (comes up in a little bit)...

		tokens = s.split()					#...split each word in 's' into a separate token...
		for token in tokens:				#...for each of those words...

		    if token.startswith("Z"):			#...if it starts with the character 'Z'...
		        num = ""
		        for char in token:
		            # print(char)
		            if char.isdigit() or (char in num_char):	#...and	also includes either a digit or one of the characters in num_char...
		                num = num + char						#...separate out the number...
		        try:
					zval = num									# ...and name it zval.
					zval = float(zval)							#Converting zval from string to float
					mz = modz(zval)								#MEAT: Call modz to get the deviation correction for the given zval
					mz = round(stepsz * round(mz/stepsz),3)		#MEAT: Round mz value to the Z step resolution.
					mz = zval + mz								#MEAT: Add absolute z-value to output of modification function. This is what will replace the associated old z value in the gcode.

		        except ValueError:
		            pass

		    if token.startswith("F"):			#if it starts with the character 'F'...
		        num = ""
		        for char in token:
		            # print(char)
		            if char.isdigit() or (char in num_char):	#...and	also includes either a digit or one of the characters in num_char...
		                num = num + char						#...separate out the number...
		        try:
					fval = num									# ...and name it fval.
					mz = str(mz)
					zval = str(zval)								#convert mz back to string
					s = "G1 Z" + mz + " F" + fval				#MEAT: Compose a new string to replace what was there before...
					print s										#...and print it (to the same line in the file)

		        except ValueError:
		            pass
	else:
		print line,				#Any other lines that don't include 'Z' should be reprinted what was already there. This is a catch all that might not do anything.
